# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from neuro_san.api.grpc import tasks_service_pb2 as neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2

GRPC_GENERATED_VERSION = '1.69.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in neuro_san/api/grpc/tasks_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateDataset = channel.unary_unary(
                '/dev.cognizant_ai.neuroai.tasks.TaskService/GenerateDataset',
                request_serializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.DatasetTaskRequest.SerializeToString,
                response_deserializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.DatasetTaskResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/dev.cognizant_ai.neuroai.tasks.TaskService/GetTaskStatus',
                request_serializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.TaskStatusRequest.SerializeToString,
                response_deserializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.TaskStatusResponse.FromString,
                _registered_method=True)


class TaskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateDataset(self, request, context):
        """Request to perform a Dataset generation task.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Request to get current status of a task being performed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateDataset': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateDataset,
                    request_deserializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.DatasetTaskRequest.FromString,
                    response_serializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.DatasetTaskResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.TaskStatusRequest.FromString,
                    response_serializer=neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.TaskStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dev.cognizant_ai.neuroai.tasks.TaskService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dev.cognizant_ai.neuroai.tasks.TaskService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateDataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dev.cognizant_ai.neuroai.tasks.TaskService/GenerateDataset',
            neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.DatasetTaskRequest.SerializeToString,
            neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.DatasetTaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dev.cognizant_ai.neuroai.tasks.TaskService/GetTaskStatus',
            neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.TaskStatusRequest.SerializeToString,
            neuro__san_dot_api_dot_grpc_dot_tasks__service__pb2.TaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
